using System;
using System.Collections.Generic;
using System.Text;
using ZigBeeNet.Transaction;
using ZigBeeNet.ZCL;
using ZigBeeNet.ZCL.Protocol;

namespace ZigBeeNet.ZDO.Command
{
    /**
    * Match Descriptor Response value object class.
    * 
    * The Match_Desc_rsp is generated by a remote device in response to a
    * Match_Desc_req either broadcast or directed to the remote device. This command
    * shall be unicast to the originator of the Match_Desc_req command.
    * 
    */
    public class MatchDescriptorResponse : ZdoResponse
    {
        /**
        * NWKAddrOfInterest command message field.
        */
        public ushort NwkAddrOfInterest { get; set; }

        /**
        * MatchList command message field.
        */
        public List<ushort> MatchList { get; set; }

        /**
        * Default constructor.
        */
        public MatchDescriptorResponse()
        {
            ClusterId = 0x8006;
        }


        public override void Serialize(ZclFieldSerializer serializer)
        {
            base.Serialize(serializer);

            serializer.Serialize(Status, ZclDataType.Get(DataType.ZDO_STATUS));
            serializer.Serialize(NwkAddrOfInterest, ZclDataType.Get(DataType.NWK_ADDRESS));
            serializer.Serialize(MatchList.Count, ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));

            for (int cnt = 0; cnt < MatchList.Count; cnt++)
            {
                serializer.Serialize(MatchList[cnt], ZclDataType.Get(DataType.ENDPOINT));
            }
        }

        public override void Deserialize(ZclFieldDeserializer deserializer)
        {
            base.Deserialize(deserializer);

            // Create lists
            MatchList = new List<ushort>();

            Status = (ZdoStatus)deserializer.Deserialize(ZclDataType.Get(DataType.ZDO_STATUS));

            if (Status != ZdoStatus.SUCCESS)
            {
                // Don't read the full response if we have an error
                return;
            }

            NwkAddrOfInterest = (ushort)deserializer.Deserialize(ZclDataType.Get(DataType.NWK_ADDRESS));
            byte? matchLength = (byte?)deserializer.Deserialize(ZclDataType.Get(DataType.UNSIGNED_8_BIT_INTEGER));

            if (matchLength != null)
            {
                for (int cnt = 0; cnt < matchLength; cnt++)
                {
                    MatchList.Add((byte)deserializer.Deserialize(ZclDataType.Get(DataType.ENDPOINT)));
                }
            }
        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();

            builder.Append("MatchDescriptorResponse [")
                   .Append(base.ToString())
                   .Append(", Status=")
                   .Append(Status)
                   .Append(", nwkAddrOfInterest=")
                   .Append(NwkAddrOfInterest)
                   .Append(", matchList=")
                   .Append(MatchList)
                   .Append(']');

            return builder.ToString();
        }

    }
}
